2016-10-12 17:15:38  [ main:0 ] - [ DEBUG ]  Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
 2016-10-12 17:15:38  [ main:45 ] - [ DEBUG ]  Set parameter http.protocol.version = HTTP/1.1
 2016-10-12 17:15:38  [ main:116 ] - [ DEBUG ]  Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
 2016-10-12 17:15:38  [ main:116 ] - [ DEBUG ]  Set parameter http.protocol.cookie-policy = default
 2016-10-12 17:15:38  [ main:117 ] - [ DEBUG ]  Set parameter http.protocol.element-charset = US-ASCII
 2016-10-12 17:15:38  [ main:117 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = ISO-8859-1
 2016-10-12 17:15:38  [ main:150 ] - [ DEBUG ]  Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@719bc401
 2016-10-12 17:15:38  [ main:157 ] - [ DEBUG ]  Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
 2016-10-12 17:15:38  [ main:158 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = UTF-8
 2016-10-12 17:15:38  [ main:160 ] - [ DEBUG ]  Java version: 1.7.0_17
 2016-10-12 17:15:38  [ main:161 ] - [ DEBUG ]  Java vendor: Oracle Corporation
 2016-10-12 17:15:38  [ main:161 ] - [ DEBUG ]  Java class path: F:\testWorkspace\MyService\target\test-classes;F:\testWorkspace\MyService\target\classes;F:\m2\Repository\junit\junit\3.8.1\junit-3.8.1.jar;F:\m2\Repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;F:\m2\Repository\commons-httpclient\commons-httpclient\3.1\commons-httpclient-3.1.jar;F:\m2\Repository\commons-logging\commons-logging\1.0.4\commons-logging-1.0.4.jar;F:\m2\Repository\commons-codec\commons-codec\1.2\commons-codec-1.2.jar
 2016-10-12 17:15:38  [ main:161 ] - [ DEBUG ]  Operating system name: Windows 7
 2016-10-12 17:15:38  [ main:161 ] - [ DEBUG ]  Operating system architecture: amd64
 2016-10-12 17:15:38  [ main:162 ] - [ DEBUG ]  Operating system version: 6.1
 2016-10-12 17:15:38  [ main:713 ] - [ DEBUG ]  SUN 1.7: SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
 2016-10-12 17:15:38  [ main:715 ] - [ DEBUG ]  SunRsaSign 1.7: Sun RSA signature provider
 2016-10-12 17:15:38  [ main:716 ] - [ DEBUG ]  SunEC 1.7: Sun Elliptic Curve provider (EC, ECDSA, ECDH)
 2016-10-12 17:15:38  [ main:716 ] - [ DEBUG ]  SunJSSE 1.7: Sun JSSE provider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)
 2016-10-12 17:15:38  [ main:716 ] - [ DEBUG ]  SunJCE 1.7: SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
 2016-10-12 17:15:38  [ main:716 ] - [ DEBUG ]  SunJGSS 1.7: Sun (Kerberos v5, SPNEGO)
 2016-10-12 17:15:38  [ main:716 ] - [ DEBUG ]  SunSASL 1.7: Sun SASL provider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, GSSAPI, CRAM-MD5, NTLM)
 2016-10-12 17:15:38  [ main:716 ] - [ DEBUG ]  XMLDSig 1.0: XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory)
 2016-10-12 17:15:38  [ main:716 ] - [ DEBUG ]  SunPCSC 1.7: Sun PC/SC provider
 2016-10-12 17:15:38  [ main:717 ] - [ DEBUG ]  SunMSCAPI 1.7: Sun's Microsoft Crypto API provider
 2016-10-12 17:15:38  [ main:844 ] - [ DEBUG ]  enter GetMethod(String)
 2016-10-12 17:15:38  [ main:846 ] - [ DEBUG ]  HttpMethodBase.addRequestHeader(Header)
 2016-10-12 17:15:38  [ main:846 ] - [ DEBUG ]  enter HttpClient.executeMethod(HttpMethod)
 2016-10-12 17:15:38  [ main:846 ] - [ DEBUG ]  enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)
 2016-10-12 17:15:38  [ main:866 ] - [ DEBUG ]  Attempt number 1 to process request
 2016-10-12 17:15:38  [ main:866 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:15:38  [ main:866 ] - [ DEBUG ]  Open connection to localhost:8080
 2016-10-12 17:15:40  [ main:2041 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:40  [ main:2042 ] - [ DEBUG ]  Closing the connection.
 2016-10-12 17:15:40  [ main:2042 ] - [ DEBUG ]  enter HttpConnection.close()
 2016-10-12 17:15:40  [ main:2042 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:40  [ main:2043 ] - [ INFO ]  I/O exception (java.net.ConnectException) caught when processing request: Connection refused: connect
 2016-10-12 17:15:40  [ main:2044 ] - [ DEBUG ]  Connection refused: connect
 java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:280)
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:80)
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:122)
	at org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:707)
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:387)
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
	at www.MyService.com.MyService.TestAction.virtualClient(TestAction.java:28)
	at www.MyService.com.MyService.TestAction.main(TestAction.java:39)
2016-10-12 17:15:40  [ main:2049 ] - [ INFO ]  Retrying request
 2016-10-12 17:15:40  [ main:2050 ] - [ DEBUG ]  Attempt number 2 to process request
 2016-10-12 17:15:40  [ main:2050 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:15:40  [ main:2050 ] - [ DEBUG ]  Open connection to localhost:8080
 2016-10-12 17:15:41  [ main:3048 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:41  [ main:3048 ] - [ DEBUG ]  Closing the connection.
 2016-10-12 17:15:41  [ main:3048 ] - [ DEBUG ]  enter HttpConnection.close()
 2016-10-12 17:15:41  [ main:3048 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:41  [ main:3049 ] - [ INFO ]  I/O exception (java.net.ConnectException) caught when processing request: Connection refused: connect
 2016-10-12 17:15:41  [ main:3049 ] - [ DEBUG ]  Connection refused: connect
 java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:280)
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:80)
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:122)
	at org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:707)
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:387)
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
	at www.MyService.com.MyService.TestAction.virtualClient(TestAction.java:28)
	at www.MyService.com.MyService.TestAction.main(TestAction.java:39)
2016-10-12 17:15:41  [ main:3050 ] - [ INFO ]  Retrying request
 2016-10-12 17:15:41  [ main:3050 ] - [ DEBUG ]  Attempt number 3 to process request
 2016-10-12 17:15:41  [ main:3050 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:15:41  [ main:3051 ] - [ DEBUG ]  Open connection to localhost:8080
 2016-10-12 17:15:42  [ main:4051 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:42  [ main:4051 ] - [ DEBUG ]  Closing the connection.
 2016-10-12 17:15:42  [ main:4051 ] - [ DEBUG ]  enter HttpConnection.close()
 2016-10-12 17:15:42  [ main:4051 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:42  [ main:4051 ] - [ INFO ]  I/O exception (java.net.ConnectException) caught when processing request: Connection refused: connect
 2016-10-12 17:15:42  [ main:4051 ] - [ DEBUG ]  Connection refused: connect
 java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:280)
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:80)
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:122)
	at org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:707)
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:387)
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
	at www.MyService.com.MyService.TestAction.virtualClient(TestAction.java:28)
	at www.MyService.com.MyService.TestAction.main(TestAction.java:39)
2016-10-12 17:15:42  [ main:4053 ] - [ INFO ]  Retrying request
 2016-10-12 17:15:42  [ main:4053 ] - [ DEBUG ]  Attempt number 4 to process request
 2016-10-12 17:15:42  [ main:4053 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:15:42  [ main:4053 ] - [ DEBUG ]  Open connection to localhost:8080
 2016-10-12 17:15:43  [ main:5095 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:43  [ main:5095 ] - [ DEBUG ]  Closing the connection.
 2016-10-12 17:15:43  [ main:5095 ] - [ DEBUG ]  enter HttpConnection.close()
 2016-10-12 17:15:43  [ main:5096 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:15:43  [ main:5096 ] - [ DEBUG ]  Method retry handler returned false. Automatic recovery will not be attempted
 2016-10-12 17:15:43  [ main:5096 ] - [ DEBUG ]  enter HttpConnection.releaseConnection()
 2016-10-12 17:15:43  [ main:5097 ] - [ DEBUG ]  Releasing connection back to connection manager.
 2016-10-12 17:16:07  [ main:0 ] - [ DEBUG ]  Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
 2016-10-12 17:16:07  [ main:5 ] - [ DEBUG ]  Set parameter http.protocol.version = HTTP/1.1
 2016-10-12 17:16:07  [ main:10 ] - [ DEBUG ]  Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
 2016-10-12 17:16:07  [ main:10 ] - [ DEBUG ]  Set parameter http.protocol.cookie-policy = default
 2016-10-12 17:16:07  [ main:10 ] - [ DEBUG ]  Set parameter http.protocol.element-charset = US-ASCII
 2016-10-12 17:16:07  [ main:10 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = ISO-8859-1
 2016-10-12 17:16:07  [ main:12 ] - [ DEBUG ]  Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@296157ec
 2016-10-12 17:16:07  [ main:12 ] - [ DEBUG ]  Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
 2016-10-12 17:16:07  [ main:13 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = UTF-8
 2016-10-12 17:16:07  [ main:16 ] - [ DEBUG ]  Java version: 1.7.0_17
 2016-10-12 17:16:07  [ main:16 ] - [ DEBUG ]  Java vendor: Oracle Corporation
 2016-10-12 17:16:07  [ main:16 ] - [ DEBUG ]  Java class path: F:\testWorkspace\MyService\target\test-classes;F:\testWorkspace\MyService\target\classes;F:\m2\Repository\junit\junit\3.8.1\junit-3.8.1.jar;F:\m2\Repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;F:\m2\Repository\commons-httpclient\commons-httpclient\3.1\commons-httpclient-3.1.jar;F:\m2\Repository\commons-logging\commons-logging\1.0.4\commons-logging-1.0.4.jar;F:\m2\Repository\commons-codec\commons-codec\1.2\commons-codec-1.2.jar
 2016-10-12 17:16:07  [ main:16 ] - [ DEBUG ]  Operating system name: Windows 7
 2016-10-12 17:16:07  [ main:16 ] - [ DEBUG ]  Operating system architecture: amd64
 2016-10-12 17:16:07  [ main:17 ] - [ DEBUG ]  Operating system version: 6.1
 2016-10-12 17:16:07  [ main:158 ] - [ DEBUG ]  SUN 1.7: SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
 2016-10-12 17:16:07  [ main:162 ] - [ DEBUG ]  SunRsaSign 1.7: Sun RSA signature provider
 2016-10-12 17:16:07  [ main:162 ] - [ DEBUG ]  SunEC 1.7: Sun Elliptic Curve provider (EC, ECDSA, ECDH)
 2016-10-12 17:16:07  [ main:162 ] - [ DEBUG ]  SunJSSE 1.7: Sun JSSE provider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)
 2016-10-12 17:16:07  [ main:162 ] - [ DEBUG ]  SunJCE 1.7: SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
 2016-10-12 17:16:07  [ main:163 ] - [ DEBUG ]  SunJGSS 1.7: Sun (Kerberos v5, SPNEGO)
 2016-10-12 17:16:07  [ main:164 ] - [ DEBUG ]  SunSASL 1.7: Sun SASL provider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, GSSAPI, CRAM-MD5, NTLM)
 2016-10-12 17:16:07  [ main:164 ] - [ DEBUG ]  XMLDSig 1.0: XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory)
 2016-10-12 17:16:07  [ main:164 ] - [ DEBUG ]  SunPCSC 1.7: Sun PC/SC provider
 2016-10-12 17:16:07  [ main:164 ] - [ DEBUG ]  SunMSCAPI 1.7: Sun's Microsoft Crypto API provider
 2016-10-12 17:16:07  [ main:204 ] - [ DEBUG ]  enter GetMethod(String)
 2016-10-12 17:16:07  [ main:206 ] - [ DEBUG ]  HttpMethodBase.addRequestHeader(Header)
 2016-10-12 17:16:07  [ main:206 ] - [ DEBUG ]  enter HttpClient.executeMethod(HttpMethod)
 2016-10-12 17:16:07  [ main:206 ] - [ DEBUG ]  enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)
 2016-10-12 17:16:07  [ main:219 ] - [ DEBUG ]  Attempt number 1 to process request
 2016-10-12 17:16:07  [ main:219 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:16:07  [ main:219 ] - [ DEBUG ]  Open connection to localhost:9090
 2016-10-12 17:16:07  [ main:235 ] - [ DEBUG ]  enter HttpMethodBase.execute(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:235 ] - [ DEBUG ]  enter HttpMethodBase.writeRequest(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:235 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:235 ] - [ DEBUG ]  enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)
 2016-10-12 17:16:07  [ main:237 ] - [ DEBUG ]  >> "GET / HTTP/1.1[\r][\n]"
 2016-10-12 17:16:07  [ main:237 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:16:07  [ main:237 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:16:07  [ main:237 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:16:07  [ main:255 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)
 2016-10-12 17:16:07  [ main:255 ] - [ DEBUG ]  enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:256 ] - [ DEBUG ]  enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:256 ] - [ DEBUG ]  enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:256 ] - [ DEBUG ]  Adding Host request header
 2016-10-12 17:16:07  [ main:256 ] - [ DEBUG ]  enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:323 ] - [ DEBUG ]  enter HttpState.getCookies()
 2016-10-12 17:16:07  [ main:323 ] - [ DEBUG ]  enter CookieSpecBase.match(String, int, String, boolean, Cookie[])
 2016-10-12 17:16:07  [ main:323 ] - [ DEBUG ]  enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:324 ] - [ DEBUG ]  >> "aaa: [0xe8][0x83][0xbd][0xe4][0xb8][0x8d][0xe8][0x83][0xbd][0xe8][0xa1][0x8c][0xe5][0x95][0x8a][\r][\n]"
 2016-10-12 17:16:07  [ main:324 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:16:07  [ main:324 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:16:07  [ main:324 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:16:07  [ main:325 ] - [ DEBUG ]  >> "User-Agent: Jakarta Commons-HttpClient/3.1[\r][\n]"
 2016-10-12 17:16:07  [ main:325 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:16:07  [ main:325 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:16:07  [ main:325 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:16:07  [ main:325 ] - [ DEBUG ]  >> "Host: localhost:9090[\r][\n]"
 2016-10-12 17:16:07  [ main:325 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:16:07  [ main:325 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:16:07  [ main:326 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:16:07  [ main:326 ] - [ DEBUG ]  enter HttpConnection.writeLine()
 2016-10-12 17:16:07  [ main:326 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:16:07  [ main:326 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:16:07  [ main:326 ] - [ DEBUG ]  >> "[\r][\n]"
 2016-10-12 17:16:07  [ main:326 ] - [ DEBUG ]  enter HttpConnection.flushRequestOutputStream()
 2016-10-12 17:16:07  [ main:328 ] - [ DEBUG ]  enter HttpMethodBase.readResponse(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:328 ] - [ DEBUG ]  enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)
 2016-10-12 17:16:07  [ main:329 ] - [ DEBUG ]  enter HttpConnection.readLine()
 2016-10-12 17:16:07  [ main:333 ] - [ DEBUG ]  enter HttpParser.readLine(InputStream, String)
 2016-10-12 17:16:07  [ main:333 ] - [ DEBUG ]  enter HttpParser.readRawLine()
 2016-10-12 17:19:20  [ main:0 ] - [ DEBUG ]  Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
 2016-10-12 17:19:20  [ main:5 ] - [ DEBUG ]  Set parameter http.protocol.version = HTTP/1.1
 2016-10-12 17:19:20  [ main:9 ] - [ DEBUG ]  Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
 2016-10-12 17:19:20  [ main:9 ] - [ DEBUG ]  Set parameter http.protocol.cookie-policy = default
 2016-10-12 17:19:20  [ main:9 ] - [ DEBUG ]  Set parameter http.protocol.element-charset = US-ASCII
 2016-10-12 17:19:20  [ main:9 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = ISO-8859-1
 2016-10-12 17:19:20  [ main:12 ] - [ DEBUG ]  Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@719bc401
 2016-10-12 17:19:20  [ main:12 ] - [ DEBUG ]  Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
 2016-10-12 17:19:20  [ main:13 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = UTF-8
 2016-10-12 17:19:20  [ main:14 ] - [ DEBUG ]  Java version: 1.7.0_17
 2016-10-12 17:19:20  [ main:15 ] - [ DEBUG ]  Java vendor: Oracle Corporation
 2016-10-12 17:19:20  [ main:15 ] - [ DEBUG ]  Java class path: F:\testWorkspace\MyService\target\test-classes;F:\testWorkspace\MyService\target\classes;F:\m2\Repository\junit\junit\3.8.1\junit-3.8.1.jar;F:\m2\Repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;F:\m2\Repository\commons-httpclient\commons-httpclient\3.1\commons-httpclient-3.1.jar;F:\m2\Repository\commons-logging\commons-logging\1.0.4\commons-logging-1.0.4.jar;F:\m2\Repository\commons-codec\commons-codec\1.2\commons-codec-1.2.jar
 2016-10-12 17:19:20  [ main:15 ] - [ DEBUG ]  Operating system name: Windows 7
 2016-10-12 17:19:20  [ main:15 ] - [ DEBUG ]  Operating system architecture: amd64
 2016-10-12 17:19:20  [ main:15 ] - [ DEBUG ]  Operating system version: 6.1
 2016-10-12 17:19:20  [ main:130 ] - [ DEBUG ]  SUN 1.7: SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
 2016-10-12 17:19:20  [ main:132 ] - [ DEBUG ]  SunRsaSign 1.7: Sun RSA signature provider
 2016-10-12 17:19:20  [ main:132 ] - [ DEBUG ]  SunEC 1.7: Sun Elliptic Curve provider (EC, ECDSA, ECDH)
 2016-10-12 17:19:20  [ main:132 ] - [ DEBUG ]  SunJSSE 1.7: Sun JSSE provider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)
 2016-10-12 17:19:20  [ main:132 ] - [ DEBUG ]  SunJCE 1.7: SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
 2016-10-12 17:19:20  [ main:132 ] - [ DEBUG ]  SunJGSS 1.7: Sun (Kerberos v5, SPNEGO)
 2016-10-12 17:19:20  [ main:133 ] - [ DEBUG ]  SunSASL 1.7: Sun SASL provider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, GSSAPI, CRAM-MD5, NTLM)
 2016-10-12 17:19:20  [ main:133 ] - [ DEBUG ]  XMLDSig 1.0: XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory)
 2016-10-12 17:19:20  [ main:133 ] - [ DEBUG ]  SunPCSC 1.7: Sun PC/SC provider
 2016-10-12 17:19:20  [ main:133 ] - [ DEBUG ]  SunMSCAPI 1.7: Sun's Microsoft Crypto API provider
 2016-10-12 17:19:20  [ main:171 ] - [ DEBUG ]  enter GetMethod(String)
 2016-10-12 17:19:20  [ main:172 ] - [ DEBUG ]  HttpMethodBase.addRequestHeader(Header)
 2016-10-12 17:19:20  [ main:172 ] - [ DEBUG ]  enter HttpClient.executeMethod(HttpMethod)
 2016-10-12 17:19:20  [ main:173 ] - [ DEBUG ]  enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)
 2016-10-12 17:19:20  [ main:182 ] - [ DEBUG ]  Attempt number 1 to process request
 2016-10-12 17:19:20  [ main:183 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:19:20  [ main:183 ] - [ DEBUG ]  Open connection to localhost:9090
 2016-10-12 17:19:20  [ main:210 ] - [ DEBUG ]  enter HttpMethodBase.execute(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:210 ] - [ DEBUG ]  enter HttpMethodBase.writeRequest(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:210 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:210 ] - [ DEBUG ]  enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)
 2016-10-12 17:19:20  [ main:212 ] - [ DEBUG ]  >> "GET /ok HTTP/1.1[\r][\n]"
 2016-10-12 17:19:20  [ main:212 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:20  [ main:212 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:20  [ main:212 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:20  [ main:227 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)
 2016-10-12 17:19:20  [ main:227 ] - [ DEBUG ]  enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:227 ] - [ DEBUG ]  enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:227 ] - [ DEBUG ]  enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:227 ] - [ DEBUG ]  Adding Host request header
 2016-10-12 17:19:20  [ main:228 ] - [ DEBUG ]  enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:243 ] - [ DEBUG ]  enter HttpState.getCookies()
 2016-10-12 17:19:20  [ main:244 ] - [ DEBUG ]  enter CookieSpecBase.match(String, int, String, boolean, Cookie[])
 2016-10-12 17:19:20  [ main:244 ] - [ DEBUG ]  enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:244 ] - [ DEBUG ]  >> "aaa: [0xe8][0x83][0xbd][0xe4][0xb8][0x8d][0xe8][0x83][0xbd][0xe8][0xa1][0x8c][0xe5][0x95][0x8a][\r][\n]"
 2016-10-12 17:19:20  [ main:244 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:20  [ main:246 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:20  [ main:246 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:20  [ main:246 ] - [ DEBUG ]  >> "User-Agent: Jakarta Commons-HttpClient/3.1[\r][\n]"
 2016-10-12 17:19:20  [ main:246 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:20  [ main:246 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:20  [ main:247 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:20  [ main:247 ] - [ DEBUG ]  >> "Host: localhost:9090[\r][\n]"
 2016-10-12 17:19:20  [ main:247 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:20  [ main:247 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:20  [ main:247 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:20  [ main:247 ] - [ DEBUG ]  enter HttpConnection.writeLine()
 2016-10-12 17:19:20  [ main:247 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:20  [ main:248 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:20  [ main:248 ] - [ DEBUG ]  >> "[\r][\n]"
 2016-10-12 17:19:20  [ main:248 ] - [ DEBUG ]  enter HttpConnection.flushRequestOutputStream()
 2016-10-12 17:19:20  [ main:249 ] - [ DEBUG ]  enter HttpMethodBase.readResponse(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:249 ] - [ DEBUG ]  enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)
 2016-10-12 17:19:20  [ main:250 ] - [ DEBUG ]  enter HttpConnection.readLine()
 2016-10-12 17:19:20  [ main:252 ] - [ DEBUG ]  enter HttpParser.readLine(InputStream, String)
 2016-10-12 17:19:20  [ main:252 ] - [ DEBUG ]  enter HttpParser.readRawLine()
 2016-10-12 17:19:38  [ main:18223 ] - [ DEBUG ]  Closing the connection.
 2016-10-12 17:19:38  [ main:18223 ] - [ DEBUG ]  enter HttpConnection.close()
 2016-10-12 17:19:38  [ main:18223 ] - [ DEBUG ]  enter HttpConnection.closeSockedAndStreams()
 2016-10-12 17:19:38  [ main:18224 ] - [ DEBUG ]  Method retry handler returned false. Automatic recovery will not be attempted
 2016-10-12 17:19:38  [ main:18224 ] - [ DEBUG ]  enter HttpConnection.releaseConnection()
 2016-10-12 17:19:38  [ main:18225 ] - [ DEBUG ]  Releasing connection back to connection manager.
 2016-10-12 17:19:57  [ main:0 ] - [ DEBUG ]  Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
 2016-10-12 17:19:57  [ main:4 ] - [ DEBUG ]  Set parameter http.protocol.version = HTTP/1.1
 2016-10-12 17:19:57  [ main:8 ] - [ DEBUG ]  Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
 2016-10-12 17:19:57  [ main:8 ] - [ DEBUG ]  Set parameter http.protocol.cookie-policy = default
 2016-10-12 17:19:57  [ main:8 ] - [ DEBUG ]  Set parameter http.protocol.element-charset = US-ASCII
 2016-10-12 17:19:57  [ main:8 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = ISO-8859-1
 2016-10-12 17:19:57  [ main:10 ] - [ DEBUG ]  Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@4b76ffeb
 2016-10-12 17:19:57  [ main:10 ] - [ DEBUG ]  Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
 2016-10-12 17:19:57  [ main:10 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = UTF-8
 2016-10-12 17:19:57  [ main:12 ] - [ DEBUG ]  Java version: 1.7.0_17
 2016-10-12 17:19:57  [ main:13 ] - [ DEBUG ]  Java vendor: Oracle Corporation
 2016-10-12 17:19:57  [ main:13 ] - [ DEBUG ]  Java class path: F:\testWorkspace\MyService\target\test-classes;F:\testWorkspace\MyService\target\classes;F:\m2\Repository\junit\junit\3.8.1\junit-3.8.1.jar;F:\m2\Repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;F:\m2\Repository\commons-httpclient\commons-httpclient\3.1\commons-httpclient-3.1.jar;F:\m2\Repository\commons-logging\commons-logging\1.0.4\commons-logging-1.0.4.jar;F:\m2\Repository\commons-codec\commons-codec\1.2\commons-codec-1.2.jar
 2016-10-12 17:19:57  [ main:13 ] - [ DEBUG ]  Operating system name: Windows 7
 2016-10-12 17:19:57  [ main:13 ] - [ DEBUG ]  Operating system architecture: amd64
 2016-10-12 17:19:57  [ main:13 ] - [ DEBUG ]  Operating system version: 6.1
 2016-10-12 17:19:57  [ main:126 ] - [ DEBUG ]  SUN 1.7: SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
 2016-10-12 17:19:57  [ main:129 ] - [ DEBUG ]  SunRsaSign 1.7: Sun RSA signature provider
 2016-10-12 17:19:57  [ main:130 ] - [ DEBUG ]  SunEC 1.7: Sun Elliptic Curve provider (EC, ECDSA, ECDH)
 2016-10-12 17:19:57  [ main:130 ] - [ DEBUG ]  SunJSSE 1.7: Sun JSSE provider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)
 2016-10-12 17:19:57  [ main:131 ] - [ DEBUG ]  SunJCE 1.7: SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
 2016-10-12 17:19:57  [ main:131 ] - [ DEBUG ]  SunJGSS 1.7: Sun (Kerberos v5, SPNEGO)
 2016-10-12 17:19:57  [ main:131 ] - [ DEBUG ]  SunSASL 1.7: Sun SASL provider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, GSSAPI, CRAM-MD5, NTLM)
 2016-10-12 17:19:57  [ main:132 ] - [ DEBUG ]  XMLDSig 1.0: XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory)
 2016-10-12 17:19:57  [ main:132 ] - [ DEBUG ]  SunPCSC 1.7: Sun PC/SC provider
 2016-10-12 17:19:57  [ main:132 ] - [ DEBUG ]  SunMSCAPI 1.7: Sun's Microsoft Crypto API provider
 2016-10-12 17:19:57  [ main:172 ] - [ DEBUG ]  enter GetMethod(String)
 2016-10-12 17:19:57  [ main:174 ] - [ DEBUG ]  HttpMethodBase.addRequestHeader(Header)
 2016-10-12 17:19:57  [ main:174 ] - [ DEBUG ]  enter HttpClient.executeMethod(HttpMethod)
 2016-10-12 17:19:57  [ main:174 ] - [ DEBUG ]  enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)
 2016-10-12 17:19:57  [ main:187 ] - [ DEBUG ]  Attempt number 1 to process request
 2016-10-12 17:19:57  [ main:188 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:19:57  [ main:188 ] - [ DEBUG ]  Open connection to localhost:9090
 2016-10-12 17:19:57  [ main:204 ] - [ DEBUG ]  enter HttpMethodBase.execute(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:205 ] - [ DEBUG ]  enter HttpMethodBase.writeRequest(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:205 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:205 ] - [ DEBUG ]  enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)
 2016-10-12 17:19:57  [ main:206 ] - [ DEBUG ]  >> "GET /ok HTTP/1.1[\r][\n]"
 2016-10-12 17:19:57  [ main:207 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:57  [ main:207 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:57  [ main:207 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:57  [ main:207 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)
 2016-10-12 17:19:57  [ main:208 ] - [ DEBUG ]  enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:208 ] - [ DEBUG ]  enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:208 ] - [ DEBUG ]  enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:208 ] - [ DEBUG ]  Adding Host request header
 2016-10-12 17:19:57  [ main:208 ] - [ DEBUG ]  enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:231 ] - [ DEBUG ]  enter HttpState.getCookies()
 2016-10-12 17:19:57  [ main:232 ] - [ DEBUG ]  enter CookieSpecBase.match(String, int, String, boolean, Cookie[])
 2016-10-12 17:19:57  [ main:232 ] - [ DEBUG ]  enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:232 ] - [ DEBUG ]  >> "aaa: [0xe8][0x83][0xbd][0xe4][0xb8][0x8d][0xe8][0x83][0xbd][0xe8][0xa1][0x8c][0xe5][0x95][0x8a][\r][\n]"
 2016-10-12 17:19:57  [ main:232 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  >> "User-Agent: Jakarta Commons-HttpClient/3.1[\r][\n]"
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  >> "Host: localhost:9090[\r][\n]"
 2016-10-12 17:19:57  [ main:233 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:19:57  [ main:234 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:57  [ main:234 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:57  [ main:234 ] - [ DEBUG ]  enter HttpConnection.writeLine()
 2016-10-12 17:19:57  [ main:234 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:19:57  [ main:234 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:19:57  [ main:234 ] - [ DEBUG ]  >> "[\r][\n]"
 2016-10-12 17:19:57  [ main:235 ] - [ DEBUG ]  enter HttpConnection.flushRequestOutputStream()
 2016-10-12 17:19:57  [ main:236 ] - [ DEBUG ]  enter HttpMethodBase.readResponse(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:236 ] - [ DEBUG ]  enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)
 2016-10-12 17:19:57  [ main:236 ] - [ DEBUG ]  enter HttpConnection.readLine()
 2016-10-12 17:19:57  [ main:241 ] - [ DEBUG ]  enter HttpParser.readLine(InputStream, String)
 2016-10-12 17:19:57  [ main:242 ] - [ DEBUG ]  enter HttpParser.readRawLine()
 2016-10-12 17:23:08  [ main:0 ] - [ DEBUG ]  Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
 2016-10-12 17:23:08  [ main:5 ] - [ DEBUG ]  Set parameter http.protocol.version = HTTP/1.1
 2016-10-12 17:23:08  [ main:9 ] - [ DEBUG ]  Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
 2016-10-12 17:23:08  [ main:9 ] - [ DEBUG ]  Set parameter http.protocol.cookie-policy = default
 2016-10-12 17:23:08  [ main:9 ] - [ DEBUG ]  Set parameter http.protocol.element-charset = US-ASCII
 2016-10-12 17:23:08  [ main:10 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = ISO-8859-1
 2016-10-12 17:23:08  [ main:11 ] - [ DEBUG ]  Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@4b76ffeb
 2016-10-12 17:23:08  [ main:12 ] - [ DEBUG ]  Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
 2016-10-12 17:23:08  [ main:12 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = UTF-8
 2016-10-12 17:23:08  [ main:13 ] - [ DEBUG ]  Java version: 1.7.0_17
 2016-10-12 17:23:08  [ main:14 ] - [ DEBUG ]  Java vendor: Oracle Corporation
 2016-10-12 17:23:08  [ main:14 ] - [ DEBUG ]  Java class path: F:\testWorkspace\MyService\target\test-classes;F:\testWorkspace\MyService\target\classes;F:\m2\Repository\junit\junit\3.8.1\junit-3.8.1.jar;F:\m2\Repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;F:\m2\Repository\commons-httpclient\commons-httpclient\3.1\commons-httpclient-3.1.jar;F:\m2\Repository\commons-logging\commons-logging\1.0.4\commons-logging-1.0.4.jar;F:\m2\Repository\commons-codec\commons-codec\1.2\commons-codec-1.2.jar
 2016-10-12 17:23:08  [ main:14 ] - [ DEBUG ]  Operating system name: Windows 7
 2016-10-12 17:23:08  [ main:14 ] - [ DEBUG ]  Operating system architecture: amd64
 2016-10-12 17:23:08  [ main:14 ] - [ DEBUG ]  Operating system version: 6.1
 2016-10-12 17:23:08  [ main:115 ] - [ DEBUG ]  SUN 1.7: SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
 2016-10-12 17:23:08  [ main:117 ] - [ DEBUG ]  SunRsaSign 1.7: Sun RSA signature provider
 2016-10-12 17:23:08  [ main:117 ] - [ DEBUG ]  SunEC 1.7: Sun Elliptic Curve provider (EC, ECDSA, ECDH)
 2016-10-12 17:23:08  [ main:117 ] - [ DEBUG ]  SunJSSE 1.7: Sun JSSE provider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)
 2016-10-12 17:23:08  [ main:118 ] - [ DEBUG ]  SunJCE 1.7: SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
 2016-10-12 17:23:08  [ main:118 ] - [ DEBUG ]  SunJGSS 1.7: Sun (Kerberos v5, SPNEGO)
 2016-10-12 17:23:08  [ main:118 ] - [ DEBUG ]  SunSASL 1.7: Sun SASL provider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, GSSAPI, CRAM-MD5, NTLM)
 2016-10-12 17:23:08  [ main:118 ] - [ DEBUG ]  XMLDSig 1.0: XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory)
 2016-10-12 17:23:08  [ main:118 ] - [ DEBUG ]  SunPCSC 1.7: Sun PC/SC provider
 2016-10-12 17:23:08  [ main:119 ] - [ DEBUG ]  SunMSCAPI 1.7: Sun's Microsoft Crypto API provider
 2016-10-12 17:23:08  [ main:169 ] - [ DEBUG ]  enter GetMethod(String)
 2016-10-12 17:23:08  [ main:172 ] - [ DEBUG ]  HttpMethodBase.addRequestHeader(Header)
 2016-10-12 17:23:08  [ main:172 ] - [ DEBUG ]  enter HttpClient.executeMethod(HttpMethod)
 2016-10-12 17:23:08  [ main:173 ] - [ DEBUG ]  enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)
 2016-10-12 17:23:08  [ main:185 ] - [ DEBUG ]  Attempt number 1 to process request
 2016-10-12 17:23:08  [ main:185 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:23:08  [ main:185 ] - [ DEBUG ]  Open connection to localhost:9090
 2016-10-12 17:23:08  [ main:203 ] - [ DEBUG ]  enter HttpMethodBase.execute(HttpState, HttpConnection)
 2016-10-12 17:23:08  [ main:204 ] - [ DEBUG ]  enter HttpMethodBase.writeRequest(HttpState, HttpConnection)
 2016-10-12 17:23:08  [ main:205 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)
 2016-10-12 17:23:08  [ main:205 ] - [ DEBUG ]  enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)
 2016-10-12 17:23:08  [ main:223 ] - [ DEBUG ]  >> "GET /ok HTTP/1.1[\r][\n]"
 2016-10-12 17:23:08  [ main:224 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:08  [ main:224 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:08  [ main:224 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:08  [ main:235 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)
 2016-10-12 17:23:08  [ main:237 ] - [ DEBUG ]  enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:23:08  [ main:237 ] - [ DEBUG ]  enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:23:08  [ main:237 ] - [ DEBUG ]  enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:23:08  [ main:237 ] - [ DEBUG ]  Adding Host request header
 2016-10-12 17:23:08  [ main:237 ] - [ DEBUG ]  enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:23:09  [ main:250 ] - [ DEBUG ]  enter HttpState.getCookies()
 2016-10-12 17:23:09  [ main:250 ] - [ DEBUG ]  enter CookieSpecBase.match(String, int, String, boolean, Cookie[])
 2016-10-12 17:23:09  [ main:250 ] - [ DEBUG ]  enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)
 2016-10-12 17:23:09  [ main:251 ] - [ DEBUG ]  >> "aaa: [0xe8][0x83][0xbd][0xe4][0xb8][0x8d][0xe8][0x83][0xbd][0xe8][0xa1][0x8c][0xe5][0x95][0x8a][\r][\n]"
 2016-10-12 17:23:09  [ main:251 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:09  [ main:251 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:09  [ main:251 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:09  [ main:251 ] - [ DEBUG ]  >> "User-Agent: Jakarta Commons-HttpClient/3.1[\r][\n]"
 2016-10-12 17:23:09  [ main:251 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:09  [ main:252 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:09  [ main:252 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:09  [ main:253 ] - [ DEBUG ]  >> "Host: localhost:9090[\r][\n]"
 2016-10-12 17:23:09  [ main:254 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:09  [ main:254 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:09  [ main:254 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:09  [ main:254 ] - [ DEBUG ]  enter HttpConnection.writeLine()
 2016-10-12 17:23:09  [ main:254 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:09  [ main:254 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:09  [ main:255 ] - [ DEBUG ]  >> "[\r][\n]"
 2016-10-12 17:23:09  [ main:255 ] - [ DEBUG ]  enter HttpConnection.flushRequestOutputStream()
 2016-10-12 17:23:09  [ main:255 ] - [ DEBUG ]  enter HttpMethodBase.readResponse(HttpState, HttpConnection)
 2016-10-12 17:23:09  [ main:257 ] - [ DEBUG ]  enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)
 2016-10-12 17:23:09  [ main:257 ] - [ DEBUG ]  enter HttpConnection.readLine()
 2016-10-12 17:23:09  [ main:261 ] - [ DEBUG ]  enter HttpParser.readLine(InputStream, String)
 2016-10-12 17:23:09  [ main:261 ] - [ DEBUG ]  enter HttpParser.readRawLine()
 2016-10-12 17:23:42  [ main:0 ] - [ DEBUG ]  Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
 2016-10-12 17:23:42  [ main:4 ] - [ DEBUG ]  Set parameter http.protocol.version = HTTP/1.1
 2016-10-12 17:23:42  [ main:10 ] - [ DEBUG ]  Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
 2016-10-12 17:23:42  [ main:10 ] - [ DEBUG ]  Set parameter http.protocol.cookie-policy = default
 2016-10-12 17:23:42  [ main:11 ] - [ DEBUG ]  Set parameter http.protocol.element-charset = US-ASCII
 2016-10-12 17:23:42  [ main:11 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = ISO-8859-1
 2016-10-12 17:23:42  [ main:13 ] - [ DEBUG ]  Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@719bc401
 2016-10-12 17:23:42  [ main:13 ] - [ DEBUG ]  Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
 2016-10-12 17:23:42  [ main:13 ] - [ DEBUG ]  Set parameter http.protocol.content-charset = UTF-8
 2016-10-12 17:23:42  [ main:15 ] - [ DEBUG ]  Java version: 1.7.0_17
 2016-10-12 17:23:42  [ main:15 ] - [ DEBUG ]  Java vendor: Oracle Corporation
 2016-10-12 17:23:42  [ main:15 ] - [ DEBUG ]  Java class path: F:\testWorkspace\MyService\target\test-classes;F:\testWorkspace\MyService\target\classes;F:\m2\Repository\junit\junit\3.8.1\junit-3.8.1.jar;F:\m2\Repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;F:\m2\Repository\commons-httpclient\commons-httpclient\3.1\commons-httpclient-3.1.jar;F:\m2\Repository\commons-logging\commons-logging\1.0.4\commons-logging-1.0.4.jar;F:\m2\Repository\commons-codec\commons-codec\1.2\commons-codec-1.2.jar
 2016-10-12 17:23:42  [ main:15 ] - [ DEBUG ]  Operating system name: Windows 7
 2016-10-12 17:23:42  [ main:15 ] - [ DEBUG ]  Operating system architecture: amd64
 2016-10-12 17:23:42  [ main:16 ] - [ DEBUG ]  Operating system version: 6.1
 2016-10-12 17:23:42  [ main:146 ] - [ DEBUG ]  SUN 1.7: SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
 2016-10-12 17:23:42  [ main:148 ] - [ DEBUG ]  SunRsaSign 1.7: Sun RSA signature provider
 2016-10-12 17:23:42  [ main:149 ] - [ DEBUG ]  SunEC 1.7: Sun Elliptic Curve provider (EC, ECDSA, ECDH)
 2016-10-12 17:23:42  [ main:149 ] - [ DEBUG ]  SunJSSE 1.7: Sun JSSE provider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)
 2016-10-12 17:23:42  [ main:149 ] - [ DEBUG ]  SunJCE 1.7: SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
 2016-10-12 17:23:42  [ main:149 ] - [ DEBUG ]  SunJGSS 1.7: Sun (Kerberos v5, SPNEGO)
 2016-10-12 17:23:42  [ main:149 ] - [ DEBUG ]  SunSASL 1.7: Sun SASL provider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, GSSAPI, CRAM-MD5, NTLM)
 2016-10-12 17:23:42  [ main:150 ] - [ DEBUG ]  XMLDSig 1.0: XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory)
 2016-10-12 17:23:42  [ main:150 ] - [ DEBUG ]  SunPCSC 1.7: Sun PC/SC provider
 2016-10-12 17:23:42  [ main:150 ] - [ DEBUG ]  SunMSCAPI 1.7: Sun's Microsoft Crypto API provider
 2016-10-12 17:23:42  [ main:188 ] - [ DEBUG ]  enter GetMethod(String)
 2016-10-12 17:23:42  [ main:189 ] - [ DEBUG ]  HttpMethodBase.addRequestHeader(Header)
 2016-10-12 17:23:42  [ main:189 ] - [ DEBUG ]  enter HttpClient.executeMethod(HttpMethod)
 2016-10-12 17:23:42  [ main:189 ] - [ DEBUG ]  enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)
 2016-10-12 17:23:42  [ main:202 ] - [ DEBUG ]  Attempt number 1 to process request
 2016-10-12 17:23:42  [ main:203 ] - [ DEBUG ]  enter HttpConnection.open()
 2016-10-12 17:23:42  [ main:203 ] - [ DEBUG ]  Open connection to localhost:9090
 2016-10-12 17:23:42  [ main:222 ] - [ DEBUG ]  enter HttpMethodBase.execute(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:223 ] - [ DEBUG ]  enter HttpMethodBase.writeRequest(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:223 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:223 ] - [ DEBUG ]  enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)
 2016-10-12 17:23:42  [ main:224 ] - [ DEBUG ]  >> "GET /ok HTTP/1.1[\r][\n]"
 2016-10-12 17:23:42  [ main:225 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:42  [ main:225 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:42  [ main:225 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:42  [ main:226 ] - [ DEBUG ]  enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)
 2016-10-12 17:23:42  [ main:226 ] - [ DEBUG ]  enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:226 ] - [ DEBUG ]  enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:227 ] - [ DEBUG ]  enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:227 ] - [ DEBUG ]  Adding Host request header
 2016-10-12 17:23:42  [ main:227 ] - [ DEBUG ]  enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:241 ] - [ DEBUG ]  enter HttpState.getCookies()
 2016-10-12 17:23:42  [ main:242 ] - [ DEBUG ]  enter CookieSpecBase.match(String, int, String, boolean, Cookie[])
 2016-10-12 17:23:42  [ main:242 ] - [ DEBUG ]  enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:243 ] - [ DEBUG ]  >> "aaa: [0xe8][0x83][0xbd][0xe4][0xb8][0x8d][0xe8][0x83][0xbd][0xe8][0xa1][0x8c][0xe5][0x95][0x8a][\r][\n]"
 2016-10-12 17:23:42  [ main:243 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:42  [ main:243 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:42  [ main:243 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:42  [ main:243 ] - [ DEBUG ]  >> "User-Agent: Jakarta Commons-HttpClient/3.1[\r][\n]"
 2016-10-12 17:23:42  [ main:243 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:42  [ main:244 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:42  [ main:244 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:42  [ main:244 ] - [ DEBUG ]  >> "Host: localhost:9090[\r][\n]"
 2016-10-12 17:23:42  [ main:244 ] - [ DEBUG ]  enter HttpConnection.print(String)
 2016-10-12 17:23:42  [ main:244 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:42  [ main:244 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:42  [ main:244 ] - [ DEBUG ]  enter HttpConnection.writeLine()
 2016-10-12 17:23:42  [ main:245 ] - [ DEBUG ]  enter HttpConnection.write(byte[])
 2016-10-12 17:23:42  [ main:245 ] - [ DEBUG ]  enter HttpConnection.write(byte[], int, int)
 2016-10-12 17:23:42  [ main:245 ] - [ DEBUG ]  >> "[\r][\n]"
 2016-10-12 17:23:42  [ main:245 ] - [ DEBUG ]  enter HttpConnection.flushRequestOutputStream()
 2016-10-12 17:23:42  [ main:245 ] - [ DEBUG ]  enter HttpMethodBase.readResponse(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:245 ] - [ DEBUG ]  enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)
 2016-10-12 17:23:42  [ main:246 ] - [ DEBUG ]  enter HttpConnection.readLine()
 2016-10-12 17:23:42  [ main:248 ] - [ DEBUG ]  enter HttpParser.readLine(InputStream, String)
 2016-10-12 17:23:42  [ main:248 ] - [ DEBUG ]  enter HttpParser.readRawLine()
 